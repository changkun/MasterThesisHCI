%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 730.000000 512.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.2 (Build 18C54) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 730 512
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 730 512
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /I put
dup 34 /n put
dup 35 /f put
dup 36 /o put
dup 37 /r put
dup 38 /m put
dup 39 /a put
dup 40 /t put
dup 41 /i put
dup 42 /space put
dup 43 /U put
dup 44 /s put
dup 45 /e put
dup 46 /quotedblleft put
dup 47 /N put
dup 48 /d put
dup 49 /quotedblright put
dup 50 /hyphen put
dup 51 /k put
dup 52 /g put
dup 53 /b put
dup 54 /h put
dup 55 /v put
dup 56 /E put
dup 57 /x put
dup 58 /c put
dup 59 /O put
dup 60 /P put
dup 61 /p put
dup 62 /l put
dup 63 /D put
dup 64 /S put
dup 65 /y put
dup 66 /u put
dup 67 /F put
dup 68 /T put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C000000186670676D00000000000000B400000428676C796600000000000004DC00001B1C686561640000000000001FF80000003668686561000000000000203000000024686D74780000000000002054000000986C6F636100000000000020EC0000004E6D617870000000000000213C0000002070726570000000000000215C0000004D14000014004B005A00000011FF3A000B0205000C02CA0011B800002C4BB800095058B101018E59B801FF85B844001DB9000900035F5E2DB800012C2020456944B001602DB800022CB800012A212DB800032C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800042C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800052C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800062C2020456944B001602020457D691844B001602DB800072CB800062A2DB800082C4B20B003265358B0801BB040598A8A20B003265358B0022621B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B80003265358B0032545B8014050582321B8014023211BB003254523212321591B2159442DB800092C4B535845441B2121592DB8000A2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8000B2C2020456944B001602DB8000C2CB8000B2A212DB8000D2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8000E2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8000F2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800102C2020456944B001602020457D691844B001602DB800112CB800102A2DB800122C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800132C4B535845441B2121592DB800142C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800152C2020456944B001602DB800162CB800152A212DB800172C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800182C2046B00425465258238A592046206A6164B0042546

0000002600000036000000460000005600000066000000760000008600000096000000A6000000B6000000C60000000D5D410500D5000000E5000000025DB8002910B8001EDCB8000ADC410500DA000A00EA000A00025D411B0009000A0019000A0029000A0039000A0049000A0059000A0069000A0079000A0089000A0099000A00A9000A00B9000A00C9000A000D5D00BA000F001900032BB8000F10BA0023000500032BB8002310303113343E0233321E0215140E0223222E0227141E0233323E0235342E0223220E02851C3C5E41415E3C1C1C3C5E41415E3C1C5F2B5680555580562B2B5680555580562B0165366954333354693636695433335469364987683D3D6887494987683E3E688700000002004E0000026202CA000800130089B800152FBA0001000900032BB8000110B8001510B80010DCB80005DC410500DA000500EA000500025D411B0009000500190005002900050039000500490005005900050069000500790005008900050099000500A9000500B9000500C90005000D5DB8000110B8000BD000B8000A2FBA0009000100032BB8000910BA0000000C00032BB800001030311311333216151406270111331133163635342623ADBA514B4B51FEE75FDA6C6F6F6C0174010643404044010156FD360124017064646F0000010025FFF0026302DB0039008DBA001E001F00032BB8001E10BA0029001400032BB8002910B8001E10B8000BDC410500DA001400EA001400025D411B0009001400190014002900140039001400490014005900140069001400790014008900140099001400A9001400B9001400C90014000D5DB80032DCB8002910B8003BDC00BA0019002400032BB8001910BA0006003700032BB8000610303101332E0323220E0215141E0615140E0223222E023523141E0233323E0235342E0635343E0233321601EB5A0229475E37315D492C2741525552412720344120284C39235A2F516B3C31635033274152555241271B2D3A1E4A5F01F93B55381A19334F363141291913121D2E2527321D0C142A412D415F3D1E1733513935462E1B14111A2921232F1C0C45000000000100020000023D02CA00070027BA0003000000032BB800031000B800012FBA0006000700032BB8000610B8000710B80003D030311311331133352115F05FEEFDC5027AFD86027A505000000001004AFFF0028802CA0011002FBA000A000B00032BB8000A10BA0001000200032BB800011000B800012FB8000A2FBA0006000F00032BB8000610303101112311140623222635112311141633323602885F5F5B60665F9B8A8792010201C8FE386063636001C8FE388F838900020024FFF5020A021100300042015CB800142BBB00380003000D00182BBB002A0003001700182BB8001710B80005D0B800052F411100060038001600380026






00>] def
/CharStrings 38 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/D 3 def
/E 4 def
/F 5 def
/I 6 def
/N 7 def
/O 8 def
/P 9 def
/S 10 def
/T 11 def
/U 12 def
/a 13 def
/b 14 def
/c 15 def
/d 16 def
/e 17 def
/f 18 def
/g 19 def
/h 20 def
/i 21 def
/k 22 def
/l 23 def
/m 24 def
/n 25 def
/o 26 def
/p 27 def
/r 28 def
/s 29 def
/t 30 def
/u 31 def
/v 32 def
/x 33 def
/y 34 def
/quotedblleft 35 def
/quotedblright 36 def
/uni2B91 37 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9319293CFDFFDF66CFE9885998F65FE6E49EC9C7C15B8E78E1E7286DA621C56362171FEE49C2F1BF23FBB67B094DD4D3359D21DEF6C2353649B9E7F69B529243CC75281823F9F689AC429A724148A3EB354B35D1E6A5B4905FAECC90A8494BE00208EB4A93D53398FACD3591A52818981C30D13BD32F6E2B59D6C0045A8045150B8FA99805053B7311F57E56396F0EBDE5F2F3AD8EEBEFA61BC0171B19E47D820373A7CA0B4809A0D279A0ED436A18613FCD25F787A20E1688145F4B6C7B819D190B8F586CEC9F5EC67590588201920618A398D61A6194E1FB336A3AE236362EAB2C93B4FC1C1AF8C1EDF7BCF54C52901BB5756D809DFE2E37F1094B00192ED0A7D3ED9E63B449E12FB44ADD76F843DD2E1790E07E0BE4214ECA71C3951E272B93FBB62415047E6453810E695831E4A8B8B3FB2D05EFF7027A910CDA857F5E411ED518CB7B7C5403B4F289B6277402B51BF261BD487B9C039659C9C9ECFA32558870063F4288334687D4C03FFF90540DFBDAF0D4ED0F72813D68F5F9A103ECED66254642F4EB6656A123B9B648BE72CF511CA9487BF63FB48776B650688CB022EF7E82EA5827BEDECAA7DBDA902978E932E446354C692830A51C5AECC632BDF96BF136BAA82C54C6C1C61AFE1C176017D83AB00A63F68E5443AC4D4AC60D89747C4D065BDE82298FF91C13F0B5BE53B0EB937BA5FC5F1E40F703B2B8CCA6C02B916B4222BBFA9FC8885EC503B1AF5DFF1BE6AA7B6642A36F5AA4CFA25356F9790A
51D23302BB11757BC96581DE9F6E093021071E167764CF605F6ECE1CCD8EDF6A2F8677B29DF2D4D906686AC1146E22203A569A60EFD2BB21FF2E939A787B79DACE8DFB225EFD0D918D7160344B9D150B5347F5FC49D10182511C39BC071F36CBA81BC359483A22FCEEBC748D42892107147F411E7D91BF9F5D5924E521C7518657ADA9F29E6DC90E317A689117B3D4BECB55F9650AE35466E1519AF3BE4F43049DFFCEFF9D4D6CF564F9F6C8A413DDA52816E908E0879E7EC88CEE0DC62F6368E88CE164CD4984D86070A72AC989E995A2B30D24E87A52CFA05EE5A7BBAA35CC315B736CFF8B397D74FBC31F60DD220706E94FB71D4552F141ABE76B6A17627F74422EF1A6F8751D365719E7D173AE2408DAC19FF8FB2832CFC62105C6670071DA1B5AA9587AFCDC4AA1A51802F2671D9B445001313AA225D0B23474E35C598B8A9CCC7B0738CD6C9D22E0B7B7E8A76E9822704688BE0D989C15529B7AC69321C9E910B5FD3A2815755C211F7E4D09B54EFBA515115CA7D2DDEA53EF7A45D3EF3366EE49DDAD9F49900E42989969731137ED8F16BADF25283A048C1B832C3452EC7C0C2F523B12959C72FDE745FC232794D0BFD36B91AD46420412D60305FCD647A6E252EBC87C001C1E0515A01F9662D82F160A1E740C85BDE63BFCFC421ACB6AB7674619BCE0F76B77735697244BB6CA4C71146449F6F2533695F8FDE7F1C2BACBBC8C6EB03BCA786EE92B3B141ED91B9EC0CFABCA9AC269A8133577BFE2A964D8BD9FA1ABB13D50713C94AC95BF3E42CB5F5D6302FE89AF059259B20990C8531DF00E2B0F14718B2FD684EA78984799A5505608D4C7C23EE2A5A7D2E4D154595381F540501E20090BFFF3FA99BFD79C6B81FE1048E3B3F5A73422A6E73D40282ADB70C87461054C734831AAC6BC56C22DC509A1DE5AD1A5D800127264CC02593184F6530002DFC95CBC7D6B5B0CA0DE00FB8EE9EAC29E34088E00CD44D49409D4C7DD1DC884061B5366205825A8AC395BFE76FE5A1EFD156E4869F027DC6056DFA9E7C29BE788DBB6C40A76AE710A74C2BFC9E0E32A2EDCBEAEFBA1D4CCC49935C72BD7EF0A51E753856069B4FA9C52B34BB7E62A41E3C98EB6F1E7EC34249D88AE4A75CFE403DADADEFAB1A780F873520C4FB4BF6EE17559AA65510BB67444A0C19C09D6601B1F133101F7B99D8DCA5D8EFDA905E929BE1EDE66ABC7C132DF657F4D0057371021C8E19312724A7F218827935D3C804C838DD341CFD7B9979333A67EB5258E4DC87EAB372314E530CC2098244089C25C196F3B1F7F76C6653A7439F11FF0C58CE42FCE927C1778F2D5F987E2FDD34C0CFB5A6A5B2812399A2F9E8502323DD01F4D14D084101D10F499318F6868CAE29E2B7E1C6AB94CD9DE0E759D01C6A149701F9FD310B778042111A5FBF0BCDA2FC6421593363481CB53


AEF1F5A185AFFF13B434B382FAC7A88C040BBD8B9CF654FAC37F6278CA0ABC2EF0F885DC5A018CADD7ADC14595D585A9EC55CF866522DDB15C13B8E643E4D43D0FB78F34743D498EB36719376DAAB15BD6F51F7B19815E6FBCFCA97C1DED9063B217553172DFC5D0616B7E9E5F9347633C41554ED759CEFBD558F5C4E582D7A23ABE9625686A1DC47C8F33C8C542FD3531F6592F0AA1F95987275A8248FC3476E1B3902BF0D36E9228F3AA26353DF3129352A3321C352835BB861A2D256D98BE7911556F836902E4875602141B77E546DC90E82680B4836C6FFD9A8572D711F6208D743437249F3DF21480588E861D51AFCD7E2C2040AACCCA84D80905B995D0BF02739BA9302E0C43CACB76C2D2FEDB354949F49F57747365603BAE934C11524BC0552691080703E26851E1B83D92AA070CFC830DB39B321796E980B047C22C0E3ED44817F349FB9194F894A13A3E97CFBABDC28A8213B29FDD061F6E967C6644A34C94678C28667F9ECE59CE145114E68A20D45B968465E422F859A1B78A9440E70AE82299D4C6B7178B0E6919D16F652C8D7CD01FE958767716E6CA136D17D9CEFC201BEB4EF8E00234C46551F04FD4A6F0245BEBB2C28693CC3418CF94F73FAAAA92BEEDF347471ADF7544F63A157E4878F4825785286B2C69F8033FE3303CE651BE45ED60E9F2E83717AFB72168160987473F3D169B7024EC9EA6DD905058FCC597E05D0F72B414E63E5C6C4637DCD6FBA9AFC43A10F9E603ABDBB9C949CBDFDDDCB619AD98CBD2FEB039196CF89E4B5F4D39F8312019ADE71DF77624AFBD6DD722F28CC8E508DE2F7EEC827AACC3A4B849641879D4FF31989D56508C7507D04EDD5134B838435792CF7E0897DBA4C616F60889D7ECE0056B34ABFAE4788ECD88471E1A494AF103F256204E43D259261E67043E6E1818077C93A59C17076C558C5E8704D655B1388D2179D08B0980D66888B8A48C05625C75B4B1C3F8F92360FD4038BA1D07F2C65701D522F3A6AA5FA4D4A751C8A3988C4A7AB2C9EEACA24694A07EA1645C5BBEA748B01240BBCCDFB17D58B651850414534B17D68740A66932F781A4D07D496A24B799A117C175231843F277190CBEEB57CF9A70BB30BF2321AC2A50E612CF6E755E57D55E328BAF73513EEC4A110E20BBAC60641D7F64FC5CF66D573EBF1D15A063B8A89BA2939660D0FB965815024F69F59CEF661245B569F8A4B8F31880C4AD1BD4A74D495D8A9A134F5C92EF67D84B0D24DFD05CA21DC46E83C58B605BBF8678C940CC60F0FE3955B09EB380137BD0C4EA8DD2BAD431FF49B1C9A487EDE0CEF65D6AEF2928FE56080D08186FEAD2EA56A5BC7513FCB7CFDD050650F234CEBD21649C80691EFFA3DAEAB58086BAB5D9BC012ACA3D2710BD81B4A99E7FF8974FA953E511E5A5FB7BE983F2DB063E2FE69C911069A4

D21FC2DCC079D31583E5C16614DB7AB392A2CD0CA5BBF85CB14F86DCCE9BD349BE45FF169DF174F4F881FC0E030D15FDB20093944926B494492156E8351E77E0AA46036D0EB70FFE8B8C9FFB8104A70FA2405C27A135652F340796246A0D6F45B26B44B36B8309EDAF36BC6330A70B9D329C246BA4CDB9EEE78CF878E13A42D74C300A4553B22824B3CAD5868DB00BDA8D7B86459A3C3CCD7D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 730 512 rc
1 0 0 -1 153 661 cm
146 150 m
265 150 l
266.65686 150 268 151.34314 268 153 c
268 207 l
268 208.65686 266.65686 210 265 210 c
146 210 l
144.34314 210 143 208.65686 143 207 c
143 153 l
143 151.34314 144.34314 150 146 150 c
h
146 150 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 358.5 481 cm
/F1.1[ 16 0 0 -16 0 0]sf
-40.599998 -3.447998 m
(!"#$%&'\(\)$"*)[ 4.144000 8.896000 4.736000 9.184000 5.328000 13.648000 8.592000 5.040000 3.552000 9.184000 8.896000 0.000000 ] xS
-16.736 15 m
(+,-%)[ 11.552000 8.000000 8.592000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 153 661 cm
146 237 m
265 237 l
266.65686 237 268 238.34314 268 240 c
268 294 l
268 295.65686 266.65686 297 265 297 c
146 297 l
144.34314 297 143 295.65686 143 294 c
143 240 l
143 238.34314 144.34314 237 146 237 c
h
146 237 m
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 358.5 394 cm
-25.927999 5.776001 m
(./--01)[ 6.816000 11.552000 8.592000 8.592000 9.488000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 153 661 cm
130 324 m
281 324 l
282.65686 324 284 325.34314 284 327 c
284 381 l
284 382.65686 282.65686 384 281 384 c
130 384 l
128.34314 384 127 382.65686 127 381 c
127 327 l
127 325.34314 128.34314 324 130 324 c
h
130 324 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 358.5 307 cm
-71.272003 -3.447998 m
(!"#$%&'\(\)$"2,--3\)"4*)[ 4.144000 8.896000 4.736000 9.184000 5.328000 13.648000 8.592000 5.040000 3.552000 9.184000 8.896000 6.224000 8.000000 8.592000 8.592000 8.304000 3.552000 8.896000 9.184000 0.000000 ] xS
-30.816 15 m
(5-6'7\)$%)[ 9.488000 8.592000 8.896000 8.592000 8.000000 3.552000 9.184000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 153 661 cm
422 324 m
573 324 l
574.65686 324 576 325.34314 576 327 c
576 381 l
576 382.65686 574.65686 384 573 384 c
422 384 l
420.34314 384 419 382.65686 419 381 c
419 327 l
419 325.34314 420.34314 324 422 324 c
h
422 324 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 650.5 307 cm
-40.599998 -3.447998 m
(!"#$%&'\(\)$")[ 4.144000 8.896000 4.736000 9.184000 5.328000 13.648000 8.592000 5.040000 3.552000 9.184000 0.000000 ] xS
-35.408001 15 m
(89:6'"4-)[ 9.776000 8.288000 8.592000 8.896000 8.592000 8.896000 9.184000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 153 661 cm
422 436 m
573 436 l
574.65686 436 576 437.34314 576 439 c
576 493 l
576 494.65686 574.65686 496 573 496 c
422 496 l
420.34314 496 419 494.65686 419 493 c
419 439 l
419 437.34314 420.34314 436 422 436 c
h
422 436 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 650.5 195 cm
-20.007999 -3.447998 m
(;\(6-%)[ 12.160000 5.040000 8.896000 8.592000 0.000000 ] xS
-24.888 15 m
(<-$=>-)[ 10.368000 8.592000 9.184000 9.488000 3.552000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 153 661 cm
23 411 m
191 411 l
192.65686 411 194 412.34314 194 414 c
194 468 l
194 469.65686 192.65686 471 191 471 c
23 471 l
21.343145 471 20 469.65686 20 468 c
20 414 l
20 412.34314 21.343145 411 23 411 c
h
23 411 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 260 220 cm
-45.504002 -3.447998 m
(?-&'"0,*$"*)[ 11.264000 8.592000 13.648000 8.592000 8.896000 9.488000 8.000000 4.448000 9.184000 8.896000 0.000000 ] xS
-73.648003 15 m
(!"#$%&'\(\)$"*@A,\(-&,)[ 4.144000 8.896000 4.736000 9.184000 5.328000 13.648000 8.592000 5.040000 3.552000 9.184000 8.896000 4.448000 10.368000 8.000000 8.000000 5.040000 8.592000 13.648000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 153 661 cm
231 411 m
391 411 l
392.65686 411 394 412.34314 394 414 c
394 468 l
394 469.65686 392.65686 471 391 471 c
231 471 l
229.34314 471 228 469.65686 228 468 c
228 414 l
228 412.34314 229.34314 411 231 411 c
h
231 411 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 464 220 cm
-66.248001 -3.447998 m
(?-&'"0,*$"*$\(6-%*)[ 11.264000 8.592000 13.648000 8.592000 8.896000 9.488000 8.000000 4.448000 9.184000 8.896000 4.448000 9.184000 5.040000 8.896000 8.592000 5.328000 0.000000 ] xS
-72.160004 15 m
(!"#$%&'\(\)$"*@$B%:-,)[ 4.144000 8.896000 4.736000 9.184000 5.328000 13.648000 8.592000 5.040000 3.552000 9.184000 8.896000 4.448000 10.368000 9.184000 8.896000 5.040000 8.592000 8.592000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 153 661 cm
23 498 m
191 498 l
192.65686 498 194 499.34314 194 501 c
194 555 l
194 556.65686 192.65686 558 191 558 c
23 558 l
21.343145 558 20 556.65686 20 555 c
20 501 l
20 499.34314 21.343145 498 23 498 c
h
23 498 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 260 133 cm
-30.52 5.776001 m
(@B::-,,)[ 10.368000 8.896000 8.592000 8.592000 8.592000 8.000000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 153 661 cm
231 498 m
391 498 l
392.65686 498 394 499.34314 394 501 c
394 555 l
394 556.65686 392.65686 558 391 558 c
231 558 l
229.34314 558 228 556.65686 228 555 c
228 501 l
228 499.34314 229.34314 498 231 498 c
h
231 498 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 464 133 cm
-23.704 5.776001 m
(C'\)>B%-)[ 9.184000 8.592000 3.552000 3.552000 8.896000 5.040000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 153 661 cm
-149 237 m
2 237 l
3.6568542 237 5 238.34314 5 240 c
5 294 l
5 295.65686 3.6568542 297 2 297 c
-149 297 l
-150.65686 297 -152 295.65686 -152 294 c
-152 240 l
-152 238.34314 -150.65686 237 -149 237 c
h
-149 237 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 79.5 394 cm
-51.551998 -3.447998 m
(@'\(\),#':\(\)$"*$%*)[ 10.368000 8.592000 5.040000 3.552000 8.000000 4.736000 8.592000 8.592000 5.040000 3.552000 9.184000 8.896000 4.448000 9.184000 5.328000 0.000000 ] xS
-58.816002 15 m
(/$"2,'\(\),#':\(\)$")[ 11.552000 9.184000 8.896000 6.224000 8.000000 8.592000 5.040000 3.552000 8.000000 4.736000 8.592000 8.592000 5.040000 3.552000 9.184000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 153 661 cm
-149 324 m
2 324 l
3.6568542 324 5 325.34314 5 327 c
5 381 l
5 382.65686 3.6568542 384 2 384 c
-149 384 l
-150.65686 384 -152 382.65686 -152 381 c
-152 327 l
-152 325.34314 -150.65686 324 -149 324 c
h
-149 324 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 79.5 307 cm
-40.599998 -3.447998 m
(!"#$%&'\(\)$")[ 4.144000 8.896000 4.736000 9.184000 5.328000 13.648000 8.592000 5.040000 3.552000 9.184000 0.000000 ] xS
-14.072 15 m
(+,-)[ 11.552000 8.000000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 153 661 cm
-149 600 m
2 600 l
3.6568542 600 5 601.34314 5 603 c
5 657 l
5 658.65686 3.6568542 660 2 660 c
-149 660 l
-150.65686 660 -152 658.65686 -152 657 c
-152 603 l
-152 601.34314 -150.65686 600 -149 600 c
h
-149 600 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 79.5 31 cm
-71.416 5.776001 m
(!"#$%&'\(\)$"*D%'",#-%)[ 4.144000 8.896000 4.736000 9.184000 5.328000 13.648000 8.592000 5.040000 3.552000 9.184000 8.896000 4.448000 7.712000 5.328000 8.592000 8.896000 8.000000 4.736000 8.592000 0.000000 ] xS
2 w
0 J
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 153 661 cm
205.5 210 m
205.5 224.10001 l
S
0 i
CM
358.5 427.29999 m
362.10001 436.89999 l
354.89999 436.89999 l
h
358.5 427.29999 m
f
0 j
1 0 0 -1 153 661 cm
205.5 233.7 m
209.10001 224.10001 l
201.89999 224.10001 l
h
205.5 233.7 m
S
1 j
0.60000002 i
205.5 297 m
205.5 311.10001 l
S
0 i
CM
358.5 340.29999 m
362.10001 349.89999 l
354.89999 349.89999 l
h
358.5 340.29999 m
f
0 j
1 0 0 -1 153 661 cm
205.5 320.70001 m
209.10001 311.10001 l
201.89999 311.10001 l
h
205.5 320.70001 m
S
1 j
0.60000002 i
171.53448 384 m
150.63412 402.46021 l
S
0 i
CM
296.43887 252.1846 m
306.01733 255.84157 l
301.25095 261.23801 l
h
296.43887 252.1846 m
f
0 j
1 0 0 -1 153 661 cm
143.43889 408.8154 m
153.01732 405.15842 l
148.25093 399.76199 l
h
143.43889 408.8154 m
S
1 j
0.60000002 i
241.8793 384 m
264.66824 402.79276 l
S
0 i
CM
425.07471 252.09952 m
419.95862 260.98465 l
415.37784 255.42981 l
h
425.07471 252.09952 m
f
0 j
1 0 0 -1 153 661 cm
272.07471 408.90048 m
266.95862 400.01535 l
262.37784 405.57019 l
h
272.07471 408.90048 m
S
1 j
0.60000002 i
177.34483 471 m
228.7892 492.93951 l
S
0 i
CM
390.61969 164.29454 m
383.20142 171.37193 l
380.37695 164.74905 l
h
390.61969 164.29454 m
f
0 j
1 0 0 -1 153 661 cm
237.61969 496.70544 m
230.20143 489.62808 l
227.37697 496.25095 l
h
237.61969 496.70544 m
S
1 j
0.60000002 i
240.65517 471 m
189.2108 492.93951 l
S
0 i
CM
333.38031 164.29454 m
343.62305 164.74905 l
340.79858 171.37193 l
h
333.38031 164.29454 m
f
0 j
1 0 0 -1 153 661 cm
180.38031 496.70544 m
190.62303 496.25095 l
187.79857 489.62808 l
h
180.38031 496.70544 m
S
1 j
0.60000002 i
107 471 m
107 485.10001 l
S
0 i
CM
260 166.3 m
263.60001 175.89999 l
256.39999 175.89999 l
h
260 166.3 m
f
0 j
1 0 0 -1 153 661 cm
107 494.70001 m
110.6 485.10001 l
103.4 485.10001 l
h
107 494.70001 m
S
1 j
0.60000002 i
311 471 m
311 485.10001 l
S
0 i
CM
464 166.3 m
467.60001 175.89999 l
460.39999 175.89999 l
h
464 166.3 m
f
0 j
1 0 0 -1 153 661 cm
311 494.70001 m
314.60001 485.10001 l
307.39999 485.10001 l
h
311 494.70001 m
S
1 j
0.60000002 i
284 354 m
406.10001 354 l
S
0 i
CM
568.70001 307 m
559.09998 310.60001 l
559.09998 303.39999 l
h
568.70001 307 m
f
0 j
1 0 0 -1 153 661 cm
415.70001 354 m
406.10001 350.39999 l
406.10001 357.60001 l
h
415.70001 354 m
S
1 j
0.60000002 i
497.5 384 m
497.5 423.10001 l
S
0 i
CM
650.5 228.3 m
654.09998 237.89999 l
646.90002 237.89999 l
h
650.5 228.3 m
f
0 j
1 0 0 -1 153 661 cm
497.5 432.70001 m
501.10001 423.10001 l
493.89999 423.10001 l
h
497.5 432.70001 m
S
1 j
0.60000002 i
5 354 m
114.1 354 l
S
0 i
CM
276.70001 307 m
267.10001 310.60001 l
267.10001 303.39999 l
h
276.70001 307 m
f
0 j
1 0 0 -1 153 661 cm
123.7 354 m
114.1 350.39999 l
114.1 357.60001 l
h
123.7 354 m
S
1 j
0.60000002 i
5 267 m
130.10001 267 l
S
0 i
CM
292.70001 394 m
283.10001 397.60001 l
283.10001 390.39999 l
h
292.70001 394 m
f
0 j
1 0 0 -1 153 661 cm
139.7 267 m
130.10001 263.39999 l
130.10001 270.60001 l
h
139.7 267 m
S
1 j
0.60000002 i
-73.5 324 m
-73.5 309.89999 l
S
0 i
CM
79.5 360.70001 m
75.900002 351.10001 l
83.099998 351.10001 l
h
79.5 360.70001 m
f
0 j
1 0 0 -1 153 661 cm
-73.5 300.29999 m
-77.099998 309.89999 l
-69.900002 309.89999 l
h
-73.5 300.29999 m
S
1 j
0.60000002 i
-73.5 384 m
-73.5 587.09998 l
S
0 i
CM
79.5 64.300003 m
83.099998 73.900002 l
75.900002 73.900002 l
h
79.5 64.300003 m
f
0 j
1 0 0 -1 153 661 cm
-73.5 596.70001 m
-69.900002 587.09998 l
-77.099998 587.09998 l
h
-73.5 596.70001 m
S
1 j
0.60000002 i
20 528 m
-33.660156 528 l
-33.660156 528.64062 l
-34.472656 528.64062 l
-34.472656 396.89999 l
S
0 i
CM
118.52734 273.70001 m
114.92735 264.10001 l
122.12734 264.10001 l
h
118.52734 273.70001 m
f
0 j
1 0 0 -1 153 661 cm
-34.472656 387.29999 m
-38.072655 396.89999 l
-30.872656 396.89999 l
h
-34.472656 387.29999 m
S
1 j
0.60000002 i
5 630 m
499.41406 630 l
499.41406 508.89999 l
S
0 i
CM
652.41406 161.7 m
648.81409 152.10001 l
656.01404 152.10001 l
h
652.41406 161.7 m
f
0 j
1 0 0 -1 153 661 cm
499.41406 499.29999 m
495.81406 508.89999 l
503.01407 508.89999 l
h
499.41406 499.29999 m
S
ep
end
%%Trailer
%%EOF
